- name: Install MariaDB and database packages
  yum:
    pkg: "{{ item }}"
    state: latest
  with_items:
    - mariadb-server
    - mysql
    - MySQL-python # Needed for MySQL Ansible modules

- name: Add OTRS MariaDB config
  copy:
    src: zotrs.conf
    dest: /etc/my.cnf.d/zotrs.cnf
  notify: Restart MariaDB

- name: Start and enable MariaDB
  service:
    name: mariadb
    state: started
    enabled: yes

- name: Add OTRS database and import initial data
  mysql_db:
    name: otrs
    encoding: utf8
    state: present
  notify:
    - Copy OTRS DB Dump
    - Import OTRS DB
    - Remove OTRS DB Dump

- name: Add OTRS User with full privs on OTRS DB
  mysql_user:
    name: otrs
    password: "{{ common_password }}"
    priv: 'otrs.*:ALL'
    state: present

- name: Get OTRS RPM
  get_url:
    url: http://ftp.otrs.org/pub/otrs/RPMS/rhel/7/otrs-6.0.7-01.noarch.rpm
    dest: /tmp/otrs.rpm

- name: Install OTRS
  yum:
    name: /tmp/otrs.rpm
    disable_gpg_check: yes
    state: present

- name: Install OTRS required Perl modules
  yum:
    name: "perl(Text::CSV_XS)"
    state: present

- name: Add OTRS config
  template:
    src: Config.pm
    dest: /opt/otrs/Kernel/Config.pm

- name: Start OTRS
  shell: /opt/otrs/bin/otrs.Daemon.pl start
  become: yes
  become_user: otrs

- name: Start OTRS Cron daemon
  shell: /opt/otrs/bin/Cron.sh start
  become: yes
  become_user: otrs

- name: Install mod_ssl and mod_auth_mellon
  yum:
    name: "{{ item }}"
    state: present
  with_items:
    - mod_ssl
    - mod_auth_mellon
  notify: Restart Apache

- name: Check to see if metadata already exists
  stat: 
    path: /etc/httpd/mellon/https_cao_entityID.xml
  register: mellonMetadataFile

- name: Set metadata flag
  set_fact:
    metadataPresent: "{{ mellonMetadataFile.stat.exists }}"

- name: Get auth_mellon metadata script
  get_url:
    url: https://raw.githubusercontent.com/UNINETT/mod_auth_mellon/master/mellon_create_metadata.sh
    dest: /tmp/mellon_create_metadata.sh
  when: metadataPresent == False

- name: Make auth_mellon metadata script executable
  file: 
    path: /tmp/mellon_create_metadata.sh
    mode: 0744
  when: metadataPresent == False

- name: Create SAML key, cert, and metadata
  shell: "/tmp/mellon_create_metadata.sh mellon_create_metadata.sh https://cao.team{{team_number}}.wildeagle.net/mellon https://cao.team{{team_number}}.wildeagle.net/mellon"
  args:
    chdir: /tmp
  when: metadataPresent == False

- name: Create mellon config directory
  file:
    path: /etc/httpd/mellon
    state: directory
  when: metadataPresent == False

- name: Move SAML key, cert, and metadata
  shell: mv /tmp/"{{item.src}}" /etc/httpd/mellon/"{{item.dst}}"
  with_items:
    - {src: mellon_create_metadata.sh.cert, dst: https_cao_entityID.cert}
    - {src: mellon_create_metadata.sh.key, dst: https_cao_entityID.key}
    - {src: mellon_create_metadata.sh.xml, dst: https_cao_entityID.xml}
  when: metadataPresent == False
  notify: Restart Apache

- name: Fetch metadata
  fetch:
    src: /etc/httpd/mellon/https_cao_entityID.xml
    dest: /tmp/cao_metadata.xml
    flat: yes
  when: metadataPresent == False

- name: Get Gluu metadata
  get_url:
    url: "https://spade.team{{team_number}}.wildeagle.net/idp/shibboleth"
    dest: /etc/httpd/mellon/gluu_metadata.xml
    validate_certs: False

- name: Copy SAML Apache config
  copy:
    src: otrsSAML.conf
    dest: /etc/httpd/conf.d/otrsSAML.conf
  notify: Restart Apache


- name: Upload metadata to Gluu server
  shell: "python3 addCaoSAML.py -g spade.team{{team_number}}.wildeagle.net -u admin -p password -n cao -d OTRS -f /tmp/cao_metadata.xml"
  args:
    chdir: "{{ role_path }}/files"
  delegate_to: localhost
  when: metadataPresent == False


- name: Start and enable Apache
  service:
    name: httpd
    state: started
    enabled: yes
